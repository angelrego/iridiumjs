{"name":"Iridiumjs","tagline":"Boost HTML horsepower","body":"# **IRIDIUM.JS** #\r\n\r\nCreate web applications by using **html, css and javascript**. No extra knowledge is required. No ninja skills are required.\r\n\r\nDon't use server technologies to render html data (PHP, JSF, GWT, CGI (sic)...). **This library is server independent**, so your html code will be portable. Just use the server as a data provider.\r\n\r\nYou will use the existing html tags and some HTML5 data-* attributes to create dynamic pages. No coffeescript, no typescript, no npm, bower, grunt, gulp, etc is needed (but it is also welcome). Learning curve?, if you know a little of html, css,javascript, and REST, **learning ALL the features takes one day** (half a day if you feel happy, and two hours if you are a ninja).\r\n\r\n\r\nThis Javascript library is strongly oriented to these concepts:\r\n\r\n* **following Model View Controller ([MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller)) pattern**. Models: the objects containing data, View: the html tags to display data, Controller: The code to manage data flow between the model an the view.\r\n* **HTML attributes and syntax**, **instead of** typing lots of **javascript** code. Example:  `<p>{{userName}}</p>` will display the real user name, loaded from a REST call\r\n* **the server doesn't create any HTML, it is just a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API**. This allows to separate front-end developers (HTML5+CSS+JS) from back-end developers (PHP, JAVA, .NET, NODE, RUBY , PYTHON...)\r\n\r\n***\r\n\r\n## FEATURES\r\n\r\n* **set of generic utilities**, like ajaxForm (given a form name, send all parameters to a server via ajax) or security (keep authentication token between calls).\r\n* **load html pages on demand**, load pages from server, asynchronously and in background.\r\n* **routing**, load one or several pages, given a logic name, navigate by using logic links, etc.\r\n* **templating**, write your dynamic code inside the html itself.\r\n* **REST oriented**, if the server is just a REST API, this is the best case scenario, since the GET POST PUT DELETE operations are already built-in.\r\n* **two-way data binding** available, watch changes between your input tags and the text tags.\r\n* **built-in authentication**, all the rest calls can be secured, just call the ir.security, the first time.\r\n* **multiscope**, the templates can use data from its own model or from other models.\r\n\r\n***\r\n\r\n## USAGE\r\n\r\ninsert into your html page the javascript file, this js code relies on jquery so you should import it as well.\r\n\r\n```html\r\n<script src=\"https://code.jquery.com/jquery-2.1.4.js\"></script>\r\n<script src=\"iridium/iridium.js\"></script>\r\n```\r\nThen, you can either add special attributes to the html tags, or use the javascript object *iridium* or *ir*.\r\n\r\n\r\n```html\r\n<!--html example, use data-target attribute to load details into the id=\"yourcontainer\" box-->\r\n<a href=\"#/details\" data-target=\"#yourcontainer\">details</a>\r\n\r\n<!--javascript example, load users into content box-->\r\n<script>\r\n    //ir and iridium are aliases to the same object\r\n    ir.load(\"details\",\"#yourcontainer\");\r\n</script>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}